@page "/"
@using ChemSharp.Molecules.Properties
@using PorphyStruct.Core.Plot

<PageTitle>PorphyStruct - Structural Analysis of Porphyrinoids</PageTitle>
<Nav>
        @if (DataContext != null)
        {
            <div class="pt-2 px-4 text-white text-sm bg-dark-blue rounded h-10 mt-4">@DataContext.Filename</div>
        }
        <ul class="mt-4 flex flex-wrap items-between gap-8 md:mb-0 mb-4">        
            <li class="pt-2">
                <Toggle @bind-Value=Settings.Instance.UseExtendedBasis Label="Use Extended Basis" DarkMode/>
            </li>
            <li class="relative w-36">
                <Button IsBusy=@uploadBusy>
                    <svg fill="#FFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                        <path d="M0 0h24v24H0z" fill="none"/>
                        <path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"/>
                    </svg>
                    <span class="ml-2">Open File</span>
                </Button>
                <Progress Value=@(Math.Round((double)UploadValue, 1)) 
                    Class=@((UploadValue < 99 && UploadValue != 0 ? "" : "hidden")) 
                    ShowValue=false 
                    Style="height: 2px; margin-top: 0.25rem;"/>
                <input type="file" @ref=inputFile @onchange="OnFileChange" class="top-0 cursor-pointer absolute block opacity-0 pin-r pin-t w-full h-full" />
            </li>
        </ul>
</Nav>

<div class="container mx-auto px-2 overflow-x-hidden">  
    @if(DataContext != null)
    {
        <RadioButtonList TValue=MacrocycleType @bind-Value=DataContext.Macrocycle.MacrocycleType/>
        <div class="mt-4">           
            <Button Click="@OnAnalyzeClick">                
                <div class="inline-flex place-content-center">
                    <div class="mr-2 h-5 w-5 self-center">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M6,22A3,3 0 0,1 3,19C3,18.4 3.18,17.84 3.5,17.37L9,7.81V6A1,1 0 0,1 8,5V4A2,2 0 0,1 10,2H14A2,2 0 0,1 16,4V5A1,1 0 0,1 15,6V7.81L20.5,17.37C20.82,17.84 21,18.4 21,19A3,3 0 0,1 18,22H6M5,19A1,1 0 0,0 6,20H18A1,1 0 0,0 19,19C19,18.79 18.93,18.59 18.82,18.43L16.53,14.47L14,17L8.93,11.93L5.18,18.43C5.07,18.59 5,18.79 5,19M13,10A1,1 0 0,0 12,11A1,1 0 0,0 13,12A1,1 0 0,0 14,11A1,1 0 0,0 13,10Z"/>
                        </svg>                     
                    </div>
                    <span class="self-center">Analyze</span>
                </div>
            </Button>
        </div>
        <div class="flex flex-wrap-reverse">
            <div class="w-full md:w-1/2">
                @if (DataContext.Items.Any())
                {            
                    <TabControl @ref=Tabs>
                        @foreach(var item in DataContext.Items)
                        {
                            var properties = item.Analysis.Properties;
                            <TabItem Header=@item.Analysis.AnalysisColor>
                               <div class="relative">
                                   <PlotView Model=item.Model class="h-[50vh]" />                               
                                   <Button Click=@DownloadImage Class="absolute top-2 right-2 z-20 w-auto px-2 rounded-full" Title="Download as PNG">
                                        <svg  style="display: block; transform: scale(1,-1)" fill="#FFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"/>
                                        </svg>
                                   </Button>
                               </div>
                               <ul> 
                                    @foreach (var param in properties.Simulation.SimulationResult)
                                    {
                                        <li class="grid grid-cols-4 gap-4 mt-2">
                                            <p class="col-auto">@param.Key</p>
                                            <p class="col-auto">@param.Value.ToString("N4") Å</p>
                                            @{
                                                var value = Math.Round(properties.Simulation.SimulationResultPercentage.First(s => s.Key == param.Key).Value, 2);
                                            }
                                            <div class="col-span-2">
                                                <Progress Value=@value/>
                                            </div>
                                        </li>
                                    }
                                    <li class="grid grid-cols-4 gap-4 mt-2">
                                        <p class="col-auto">D<sub>oop</sub> (exp.)</p>
                                        <p class="col-auto">@properties.OutOfPlaneParameter.Value.ToString("N4") Å</p>
                                    </li>
                                    <li class="grid grid-cols-4 gap-4 mt-2">
                                        <p class="col-auto">D<sub>oop</sub> (sim.)</p>
                                        <p class="col-auto">@properties.Simulation.OutOfPlaneParameter.Value.ToString("N4") Å</p>
                                    </li>
                                    <li class="grid grid-cols-4 gap-4 mt-2">
                                        <p class="col-auto">δ<sub>oop</sub> (sim.)</p>
                                        <p class="col-auto">@((Math.Abs(properties.OutOfPlaneParameter.Value - properties.Simulation.OutOfPlaneParameter.Value)/properties.OutOfPlaneParameter.Value*100).ToString("N2")) %</p>
                                    </li>
                               </ul>
                            </TabItem>    
                        }
                    </TabControl>
                }
            </div>
            <div class="w-full md:w-1/2">
                <BlazorMolecule Molecule="DataContext.Macrocycle" class="h-[30vh] md:h-[60vh]" />
            </div>
        </div>
    }
    else
    {
        <div class="place-content-center self-center text-center py-4 my-8">
            <img src="/porphystruct.svg" width="128" class="mx-auto"/>
            <h1 class="mt2 font-bold text-4xl flex justify-center place-content-center">PorphyStruct <span class="ml-2 rounded-full bg-green text-lg py-1 px-2 self-center">WebVersion</span></h1>
            <p class="mt-2">Start by opening a .cif, .mol2, .pdb, .xyz or .mol File!</p>
        </div>
    }
</div>